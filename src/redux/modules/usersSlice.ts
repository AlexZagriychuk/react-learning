import { PayloadAction, createEntityAdapter, createSelector, createSlice } from "@reduxjs/toolkit";
import { RootState } from "../store";
import { User, UserType } from "../../components/user/users";
import { apiSlice } from "./apiSlice";
import { DateUnit, generateDates } from "../../utils/DateUtils";


const usersAdapter = createEntityAdapter<User>({
    sortComparer: (a, b) => a.id - b.id
})

const initialState = usersAdapter.getInitialState({
    activeUserId: 0,
    nextUserId: 1
})

// 1. Replace first user with our fake Admin user
// 2. Add fake avatar to all fetched users (API does not return it, but our APP requires it)
// 3. Add fake user registration date (API does not return it, but our APP requires it)
const processGetUsersApiResponse = (usersApiResponseData: []): User[] => {
    const usersCount = usersApiResponseData.length

    let oneYearFromNowInThePast = new Date();
    oneYearFromNowInThePast.setFullYear(oneYearFromNowInThePast.getFullYear() - 1);
    const fakeRegistrationDates = generateDates(usersCount, oneYearFromNowInThePast, DateUnit.DAY, -30)

    const users = usersApiResponseData.map((userData: any, index) => {
        let fakeUserRegistrationDateStr = fakeRegistrationDates[usersCount - index - 1].toLocaleDateString()
        const userId = userData.id

        if (index === 0) {
            return {
                id: userId,
                type: UserType.ADMIN,
                name: "Michael Scott",
                username: "Michael_Scott_Best_Admin",
                avatar: "/michael scott.jpg",
                registered: fakeRegistrationDates[usersCount - 1].toLocaleDateString()
            } as User
        } else {
            return {
                id: userId,
                type: UserType.WRITER,
                name: userData.name,
                username: userData.username,
                avatar: `https://picsum.photos/id/${userId * 10}/300/200`,
                registered: fakeUserRegistrationDateStr
            } as User
        }
    })

    return users
}

export const extendedApiSlice = apiSlice.injectEndpoints({
    endpoints: builder => ({
        getUsers: builder.query({
            query: () => '/users',
            transformResponse: (responseData: []) => {
                const responseDataProcessed = processGetUsersApiResponse(responseData)
                return usersAdapter.setAll(initialState, responseDataProcessed)
            }
        })
    })
})

export const usersSlice = createSlice({
    name: "users",
    initialState,
    reducers: {
        currentUserChanged: (state, action: PayloadAction<number>) => {
            state.activeUserId = action.payload
        },

    }
})


export const { useGetUsersQuery } = extendedApiSlice

export const selectUsersResult = extendedApiSlice.endpoints.getUsers.select("")

const selectUsersData = createSelector(
    selectUsersResult,
    usersResult => usersResult.data
)

export const { selectAll: selectAllUsers, selectById: selectUserById } =
    usersAdapter.getSelectors((state: RootState) => selectUsersData(state) ?? initialState)

// To access data generated by the RTK Query (extendedApiSlice), we must use "(selectUsersData(state) ?? initialState).x" instead of "state.users.x" otherwise (state.users.x will always be empty, the same as initial state). Because "In this case, the data is nested down inside the RTK Query cache reducer, so we select the right field out of the cache state." (https://redux.js.org/tutorials/essentials/part-8-rtk-query-advanced#transforming-responses)
// However, to access data not generated by RTK Query (in this case {activeUserId: number, nextUserId: number}) we still need to use selectors like "state.users.x" (which is a bit confusing)
export const selectAllUserEntities = (state: RootState) => (selectUsersData(state) ?? initialState).entities
export const selectCurrentUserId = (state: RootState) => state.users.activeUserId
export const selectCurrentUser = (state: RootState) => selectUserById(state, selectCurrentUserId(state))

export const { currentUserChanged } = usersSlice.actions
export default usersSlice.reducer